rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /Article/{articleId} {
    		allow get;
        allow list;
        allow write;
        // allow create: if request.auth.token.email == request.resource.data.email;
        // allow update: if request.auth.token.email == resource.data.email;
        // allow delete: if request.auth.token.email == resource.data.email;
    }
		match /Tag/{tagId} {
    	allow get;
      allow list;
      allow create; // TODO: valid user, tag not blank or a non slug, need length limit
    }
    match /User/{userId} {
    	allow get;
      allow list;
      allow create: if validUser(userId);
      allow update: if validUser(userId) && validUserUpdate(userId); // TODO: didnt change username, other fields are not blank
    }
    match /Username/{username} {
    	allow get;
      allow list;
      allow create: if validUsername(username);
    }
    match /Email/{emailId} {
    	allow get: if request.auth.uid == // TODO: logged in?
    }
    
    function validUsername(username) {
      let owner = request.auth.uid == request.resource.data.uid;
      let validLength = username.size() >= 3 && username.size() <= 15;
      let validUserDoc = getAfter(/databases/$(database)/documents/User/$(request.auth.uid)).data.username == username;
      
      return owner && validLength && validUserDoc;     
    }
      
    function validUser(userId) {
      let owner = request.auth.uid == userId;
      let createdValidUsername = existsAfter(/databases/$(database)/documents/Username/$(request.resource.data.username));
      let validEmail = existsAfter(/databases/$(database)/documents/Email/$(request.auth.token.email));
      
      return owner && createdValidUsername && validEmail;
    }

    function validUserUpdate(userId) {

    }
  }
}