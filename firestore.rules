rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /Article/{articleId} {
    		allow get: if authorGet(articleId) || resource.data.published;
    		allow list: if author() || resource.data.published; 
        allow create: if validArticleAuth() && validArticleCreateAuth() && validArticleCreate(articleId);
        allow update: if validArticleAuth() && validArticleUpdate();
        allow delete: if author();
    }
		match /Tag/{tagId} {
    	allow get;
      allow list;
      allow create: if validTagCreate(tagId);
      allow update: if validTagUpdate();
    }
    match /User/{userId} {
    	allow get;
      allow list;
      allow create: if validUserCreate(userId);
      allow update: if validUserUpdate(userId);
    }
    match /Username/{username} {
    	allow get;
      allow list;
      allow create: if validUsername(username);
    }
    match /Email/{emailId} {
    	allow get: if emailId == request.auth.token.email;
    }
    
    function validUsername(username) {
      let owner = request.auth.uid == request.resource.data.uid;
      let validLength = username.size() >= 3 && username.size() <= 15;
      let validUserDoc = getAfter(/databases/$(database)/documents/User/$(request.auth.uid)).data.username == username;
      
      return owner && validLength && validUserDoc && verified();     
    }
      
    function validUserCreate(userId) {
      let owner = request.auth.uid == userId;
      let createdValidUsername = existsAfter(/databases/$(database)/documents/Username/$(request.resource.data.username));
      
      return owner && createdValidUsername && verified();
    }

    function validUserUpdate(userId) {
      let owner = request.auth.uid == userId;

      let validDisplayName = request.resource.data.displayName.size() > 0 && request.resource.data.displayName.size() <= 50;
      let validDesc = request.resource.data.desc.size() > 0 && request.resource.data.desc.size() <= 255;
      let validPhotoURL = request.resource.data.photoURL.size() > 0 && request.resource.data.photoURL.size() <= 2000;
      let updateForbidden = request.resource.data.diff(resource.data).affectedKeys().hasAny(['username']);

      return owner && verified() && validDisplayName && validDesc && validPhotoURL && !updateForbidden;
    }

    function validTagCreate(tagId) {
      let validId = tagId.size() > 0 && tagId.size() <= 25;
      let updateForbidden = resource.data.diff({}).affectedKeys().size() == 0;

      return verified() && validId && !updateForbidden;
    }

    function validTagUpdate() {
      // user did nothing, this is so we dont have to check if the tags exist in the batch update
      let updateForbidden = resource.data.diff(request.resource.data).affectedKeys().size() == 0;

      return verified() && !updateForbidden;
    }

    function validArticleAuth() {
      let now = request.time == request.resource.data.date;

      return verified() && now;
    }

    function validArticleCreateAuth() {
      let owner = request.auth.uid == request.resource.data.uid;
      let validUsername = request.resource.data.username == get(/databases/$(database)/documents/User/$(request.auth.uid)).data.username;
      let userDoc = get(/databases/$(database)/documents/User/$(request.auth.uid)).data;
      let validUserDoc = request.resource.data.displayName == userDoc.displayName && request.resource.data.desc == userDoc.desc && request.resource.data.photoURL == userDoc.photoURL;

      return owner && validUsername && validUserDoc;
    }
    
    function validArticleCreate(articleId) {
      // min: 4 + 1 + 1, max: 100 + 1 + 128
      let validId = articleId.size() >= 6 && articleId.size() <= 229;
      let validSlug = request.resource.data.slug.size() >= 4 && request.resource.data.slug.size() <= 100;
      let validTitle =  request.resource.data.title.size() >= 4 && request.resource.data.title.size() <= 60;
      let validSubtitle = request.resource.data.subtitle == "";
      let validImage = request.resource.data.image == "";
      let validAlt = request.resource.data.alt == "";
      let validContent = request.resource.data.content == "";
      let validPublished = request.resource.data.published == false;
      let validCategory = request.resource.data.category == "arts";
      let validTags = request.resource.data.tags.size() == 0;
      
      return validId && validSlug && validTitle && validSubtitle && validImage && validAlt && validContent && validPublished && validCategory && validTags;
    }

    function validArticleUpdate() {
      let owner = request.auth.uid == resource.data.uid;

      let updateForbidden = request.resource.data.diff(resource.data).affectedKeys().hasAny(['username', 'displayName', 'desc', 'photoURL', 'uid', 'slug']);
      let validTitle =  request.resource.data.title.size() >= 4 && request.resource.data.title.size() <= 60;
      let validSubtitle =  request.resource.data.subtitle.size() >= 4 && request.resource.data.subtitle.size() <= 255;
      let validImage =  request.resource.data.image.size() > 0 && request.resource.data.image.size() <= 2000;
      let validAlt =  request.resource.data.alt.size() >= 4 && request.resource.data.alt.size() <= 100;
      let validCategory = request.resource.data.category.size() > 0;
      let validTags = request.resource.data.tags.size() >= 3 && request.resource.data.tags.size() <= 10;
      let validPublished = request.resource.data.published is bool;
      let validContent = request.resource.data.content.size() > 0;

      return owner && !updateForbidden && validTitle && validSubtitle && validImage && validAlt && validCategory && validTags && validPublished && validContent;
    }

    function authorGet(articleId) {
      // if exists then u must be the owner, if not it doesnt matter
      let exi = exists(/databases/$(database)/documents/Article/$(articleId));
      let owner = request.auth.uid == resource.data.uid;

      return ((exi && owner) || !exi) && verified();
    }

    function author() {
      let owner = request.auth.uid == resource.data.uid;

      return owner && verified();
    }

    function verified() {
      let validEmail = exists(/databases/$(database)/documents/Email/$(request.auth.token.email));

      return validEmail;
    }
  }
}